global !p

def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

endglobal

#############
# SELF MADE #
#############

snippet menv "Math environ aligned" bA
$$
\begin{aligned}
	$1
\end{aligned}
$$
endsnippet

context "math()"
snippet beg "LaTex begin" bA
\begin{$1}
	$0
\end{$1}
endsnippet

snippet math "Markdown LaTex" bA
$$
$1
$$
endsnippet

snippet inl "Markdown inline LaTex" mA
$${1}$
endsnippet

snippet al "LaTex align" bA
\begin{align}
$1
\end{align}
endsnippet

snippet al* "LaTex align*" bA
\begin{align*}
$1
\end{align*}
endsnippet

context "math()"
snippet lim "LaTex limit" wA
\lim_{$1 \to $2} f($3) = $4
endsnippet

snippet wise "LaTex Piecewise Function" bA
\begin{cases}
$1, & \text{if } $2\\\
$3 & \text{if } $4
\end{cases}
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet td "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

priority 2000
context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
snippet / "Fraction" iA
\\frac{${VISUAL}}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

context "math()"
snippet ooo "Infinity" iA
\infty
endsnippet

context "math()"
snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq 
endsnippet

priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

context "math()"
snippet >= "greater eq" iA
\geq
endsnippet


context "math()"
snippet <= "less eq" iA
\leq
endsnippet

context "math()"
snippet root "square root" iA
\sqrt{$1}
endsnippet

context "math()"
snippet ~ "prime" iA
^{\prime}
endsnippet

context "math()"
snippet 1/2 "half" iA
\frac{1}{2}
endsnippet

context "math()"
snippet sin "sine" iwA
\sin($1)
endsnippet

context "math()"
snippet tan "tangent" iwA
\tan($1)
endsnippet

context "math()"
snippet cos "cosine" iwA
\cos($1)
endsnippet

context "math()"
snippet sec "secant" iwA
\sec($1)
endsnippet

context "math()"
snippet csc "cosecant" iwA
\csc($1)
endsnippet

context "math()"
snippet cot "cotangent" iwA
\cot($1)
endsnippet

context "math()"
snippet +- "Plus or Minus" iA
\pm$1
endsnippet

context "math()"
snippet * "Times" iA
 \times $1
endsnippet

context "math()"
snippet teta "Theta" iA
\theta
endsnippet

context "math()"
snippet alp "Alpha" iwA
\alpha
endsnippet

context "math()"
snippet beta "Beta" iwA
\beta
endsnippet

context "math()"
snippet txt "text" iA
\text{$1 }$2
endsnippet

context "math()"
snippet there "therefore" iwA
\therefore
endsnippet

context "math()"
snippet in "in" iwA
\in
endsnippet

context "math()"
snippet diff "Dy/Dx" iA
\frac{d}{d$1}$2
endsnippet

context "math()"
snippet dy "Dy/Dx" iwA
\frac{d${1}}{d${2}}$3
endsnippet


context "math()"
snippet pi "Pie" iwA
\pi $1
endsnippet

